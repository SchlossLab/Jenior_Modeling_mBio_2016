# Write tables to files, ranked by betweenness
table_file <- '~/Desktop/Repositories/Jenior_Transcriptomics_2015/results/supplement/tables/Table_S2_enzyme.tsv'
write.table(enzyme_topology, file=table_file, quote=FALSE, sep='\t', row.names=FALSE)
table_file <- '~/Desktop/Repositories/Jenior_Transcriptomics_2015/results/supplement/tables/Table_S2_substrate.tsv'
write.table(substrate_topology, file=table_file, quote=FALSE, sep='\t', row.names=FALSE)
rm(table_file, graph_topology, enzyme_topology, substrate_topology)
#-------------------------------------------------------------------------------------------------------------------------------------#
# Transform largest component graph for plotting
# Remove loops and multiple edges to make visualzation easier
simple_graph <- simplify(raw_graph)
decomp_simple_graph <- decompose.graph(simple_graph)
largest_component <- which.max(sapply(decomp_simple_graph, vcount))
largest_simple_graph <- decomp_simple_graph[[largest_component]]
ko_simp <- as.vector(grep('K', V(largest_simple_graph)$name, value=TRUE))
substrate_simp <- as.vector(grep('C', V(largest_simple_graph)$name, value=TRUE))
nodes <- c(ko_simp, substrate_simp)
summary(largest_simple_graph)
print(length(ko_simp))
print(length(substrate_simp))
# Remove zeroes so transformation doesn't return negative infinity
ko[,2][ko[,2] == 0] <- 1
ko[,2] <- log10(ko[,2])
ko[,2][ko[,2] < 0.4] <- 0.4
# Scale points by number of transcripts mapped
ko <- as.data.frame(subset(ko, ko[,1] %in% ko_simp))
ko <- ko[match(ko_simp, ko$KO_code),]
mappings <- c(as.vector(ko[,2] * 5), rep(2, length(substrate_simp)))
node_size <- cbind.data.frame(nodes, mappings)
node_size <- node_size[match(V(largest_simple_graph)$name, node_size$nodes),]
node_size <- setNames(as.numeric(node_size[,2]), as.character(node_size[,1]))
V(largest_simple_graph)$size <- as.matrix(node_size)
rm(raw_graph, ko, ko_simp, substrate_simp, node_size, mappings, nodes, simple_graph, decomp_simple_graph, largest_component)
# Color graph
V(largest_simple_graph)$color <- ifelse(grepl('K', V(largest_simple_graph)$name), adjustcolor('firebrick3', alpha.f=0.6), 'blue3') # Color nodes
E(largest_simple_graph)$color <- 'gray15' # Color edges
#-------------------------------------------------------------------------------------------------------------------------------------#
# Set up example network
# Define file variables for network plot and layout
network <- matrix(c('K01', 'C01',
'C01', 'K02',
'C01', 'K03'), nrow=3, ncol=2, byrow=TRUE)
node_size <- matrix(c('K01', '12.5',
'K02', '45',
'K03', '50',
'C01', '20'), nrow=4, ncol=2, byrow=TRUE)
optimal_layout2 <- matrix(c(-21.09826017, 22.1407060,
0.09077637, 0.2154631,
-8.32243732, -29.0949351,
29.67130628, 7.6231375), nrow=4, ncol=2, byrow=TRUE)
# Format directed graph
network <- graph.data.frame(network, directed=TRUE)
# Assign nodes sizes
node_size <- node_size[match(V(network)$name, node_size[,1]),]
node_size <- setNames(as.numeric(node_size[,2]), as.character(node_size[,1]))
V(network)$size <- as.matrix(node_size)
rm(node_size)
# Color graph
V(network)$color <- ifelse(grepl('K', V(network)$name), 'firebrick3', 'blue3') # Color nodes
E(network)$color <- 'gray15' # Color edges
#-------------------------------------------------------------------------------------------------------------------------------------#
# Set up plotting environment
plot_file <- '~/Desktop/Repositories/Jenior_Transcriptomics_2015/results/figures/figure_5.pdf'
pdf(file=plot_file, width=10, height=7)
layout(matrix(c(1,2,2,
3,2,2), nrow=2, ncol=3, byrow=TRUE))
#---------------------------------------#
# Large component of C. difficile 630 graph
par(mar=c(0,1,1,1))
plot(largest_simple_graph, vertex.label=NA, layout=optimal_layout1,
edge.arrow.size=0.25, edge.arrow.width=0.4, vertex.frame.color='black')
# Draw box
rect(xleft=0.8, ybottom=0, xright=1.15, ytop=0.3, lwd=2)
text(x=-1, y=1, 'a', cex=2, font=2)
#---------------------------------------#
# Example network and importance calculation
par(mar=c(0,0,0,1))
plot(network, vertex.label=NA, layout=optimal_layout2, vertex.frame.color='black', xlim=c(-1.2,1.2), ylim=c(-1.2,1.2))
text(x=-1.5, y=1.45, 'b', cex=2, font=2)
text(x=-0.95, y=1.11, labels='dAdo Aminohydrolase', font=2, cex=1.3) # Enzyme 1 name
text(x=-1, y=1, labels='7', col='white', cex=1.3) # Enzyme 1 transcription
text(x=-0.5, y=-1.3, labels='ATP:dAdo 5\'-Phosphotransferase', font=2, cex=1.3) # Enzyme 2 name
text(x=-0.5, y=-1, labels='94', col='white', cex=2.4) # Enzyme 2 transcription
text(x=1, y=0.75, labels=expression(bold(paste('dAdo:', PO[4]^-3, ' Ribosyltransferase'))), cex=1.3) # Enzyme 3
text(x=0.99, y=0.44, labels='115', col='white', cex=2.6) # Enzyme 3 transcription
text(x=-0.165, y=0.145, 'm', col='white', cex=2.1) # Substrate node label
text(x=c(-0.8,-0.8), y=c(0.15,0.05), labels=c('Deoxyadenosine (dAdo)','Importance = 6.554'), cex=1.5, font=c(2,1)) # Compound & calculated importance
segments(x0=-1.15, y0=0, x1=-0.45, y1=0, lwd=2)
legend(x=0.7, y=1.28, legend=c('Enzyme node', 'Metabolite node'),
pt.bg=c('firebrick3', 'blue3'), col='black', pch=21, pt.cex=3.3, cex=1.7, bty='n')
text(x=-0.5, y=-1.12, expression(t[i]), col='white', cex=2) # labeled transcription for input reactions
text(x=0.99, y=0.32, expression(t[i]), col='white', cex=2)
text(x=-1, y=0.87, expression(t[o]), col='black', cex=2) # labeled transcription for output reactions
text(x=-0.6, y=0.7, expression(e[i]), col='black', cex=2) # labeled indegree
text(x=-0.4, y=-0.3, expression(e[o]), col='black', cex=2) # labeled outdegree
text(x=0.3, y=0.33, expression(e[o]), col='black', cex=2)
Arrows(x0=0.63, y0=-0.5, x1=0.12, y1=-0.5, lwd=3, arr.type='triangle', arr.length=0.5, arr.width=0.2) # Score explanation line
Arrows(x0=0.63, y0=-0.5, x1=1.14, y1=-0.5, lwd=3, arr.type='triangle', arr.length=0.5, arr.width=0.2)
segments(x0=0.63, y0=-0.45, x1=0.63, y1=-0.55, lwd=2)
text(x=0.63, y=-0.63, '0', cex=1.8)
text(x=0.12, y=-0.61, '-', cex=2.2)
text(x=1.14, y=-0.61, '+', cex=2.2)
text(x=1.15, y=-0.4, 'More likely consumed', cex=1.35)
text(x=0.14, y=-0.4, 'More likely produced', cex=1.35)
text(x=0.63, y=-0.75, 'Importance Score', cex=1.5, font=2)
# Continuation arrows
Arrows(x0=-1.38, y0=1, x1=-1.12, y1=1, arr.type='curved', arr.length=0.45, arr.width=0.25, col='gray15')
Arrows(x0=1.25, y0=0.44, x1=1.5, y1=0.44, arr.type='curved', arr.length=0.45, arr.width=0.25, col='gray15')
Arrows(x0=-0.725, y0=-1, x1=-1.32, y1=-1, arr.type='curved', arr.length=0.45, arr.width=0.25, col='gray15')
# Draw box
rect(xleft=-1.38, ybottom=-1.4, xright=1.56, ytop=1.3, lwd=2)
#---------------------------------------#
# Importance algorithm
plot.new()
text(x=0.27, y=0.8, expression(paste(bold('(i) '), mu[i]) == paste(bgroup('(',frac(Sigma * t[i], italic(n) * (e[o])),')'))), cex = 1.8)
text(x=0.27, y=0.6, expression(paste(bold('(ii) '), mu[o]) == paste(bgroup('(',frac(Sigma * t[o], italic(n) * (e[i])),')'))), cex = 1.8)
text(x=0.55, y=0.4, expression(paste(bold('(iii) '), Importance(m)) == paste(log[2], '(', mu[i], ' - ', mu[o], ')')), cex = 1.8)
dev.off()
#-------------------------------------------------------------------------------------------------------------------------------------#
# Clean up
rm(optimal_layout1, optimal_layout2, largest_simple_graph, network, plot_file)
for (dep in deps){
pkg <- paste('package:', dep, sep='')
detach(pkg, character.only = TRUE)
}
rm(dep, deps, pkg)
gc()
# Load dependencies
deps <- c('wesanderson');
for (dep in deps){
if (dep %in% installed.packages()[,"Package"] == FALSE){
install.packages(as.character(dep), quiet=TRUE);
}
library(dep, verbose=FALSE, character.only=TRUE)
}
# Define variables
nmds_file <- '~/Desktop/Repositories/Jenior_Transcriptomics_2015/data/16S_analysis/all_treatments.0.03.unique_list.thetayc.0.03.lt.ave.nmds.axes'
summary_file <- '~/Desktop/Repositories/Jenior_Transcriptomics_2015/data/16S_analysis/all_treatments.0.03.unique_list.groups.summary'
#shared_file <- '~/Desktop/Repositories/Jenior_Transcriptomics_2015/data/16S_analysis/all_treatments.family.subsample.shared'
#taxonomy_file <- '~/Desktop/Repositories/Jenior_Transcriptomics_2015/data/16S_analysis/all_treatments.family.cons.taxonomy'
metadata_file <- '~/Desktop/Repositories/Jenior_Transcriptomics_2015/data/metadata.tsv'
# Load in data
nmds <- read.delim(nmds_file, sep='\t', header=T, row.names=1)
nmds <- nmds[!rownames(nmds) %in% c('CefC5M2'), ] # Remove contaminated sample
metadata <- read.delim(metadata_file, sep='\t', header=T, row.names=1)
metadata <- metadata[!rownames(metadata) %in% c('CefC5M2'), ] # Remove contaminated sample
summary <- read.delim(summary_file, sep='\t', header=T, row.names=2)
summary <- summary[!rownames(summary) %in% c('CefC5M2'), ] # Remove contaminated sample
#taxonomy <- read.delim(taxonomy_file, sep='\t', header=T, row.names=1)
#shared <- read.delim(shared_file, sep='\t', header=T, row.names=2)
#shared <- shared[!rownames(shared) %in% c('CefC5M2'), ]  # Remove contaminated sample
#shared$numOtus <- NULL
#shared$label <- NULL
rm(nmds_file, summary_file, metadata_file)
#-------------------------------------------------------------------------------------------------------------------------------------#
# Format data
# Combine the metadata with axes and format
metadata_axes <- merge(metadata, nmds, by='row.names')
mock_axes <- subset(metadata_axes, infection == 'mock')
mock_axes <- subset(mock_axes, type != 'germfree')
infected_axes <- subset(metadata_axes, infection == '630')
infected_axes <- subset(infected_axes, type != 'germfree')
# Combine the metadata with summary, format, and get median invsimpson diversity
metadata_summary <- merge(metadata, summary, by='row.names')
metadata_summary <- subset(metadata_summary, type != 'germfree')
metadata_summary$abx <- factor(metadata_summary$abx, levels=c('streptomycin', 'cefoperazone', 'clindamycin', 'none'))
strep_div <- as.numeric(median(metadata_summary[metadata_summary$abx == 'streptomycin', 13]))
cef_div <- as.numeric(median(metadata_summary[metadata_summary$abx == 'cefoperazone', 13]))
clinda_div <- as.numeric(median(metadata_summary[metadata_summary$abx == 'clindamycin', 13]))
conv_div <- as.numeric(median(metadata_summary[metadata_summary$abx == 'none', 13]))
rm(nmds, summary, metadata)
#-------------------------------------------------------------------------------------------------------------------------------------#
# Set up multi-panel figure
plot_file <- '~/Desktop/Repositories/Jenior_Transcriptomics_2015/results/supplement/figures/figure_S1.pdf'
pdf(file=plot_file, width=12, height=8)
layout(matrix(c(1,1,2),
nrow=1, ncol=3, byrow = TRUE))
#-------------------------------------------------------------------------------------------------------------------------------------#
# NMDS of treatment groups
par(las=1, mar=c(5,5,1,1))
plot(metadata_axes$axis1, metadata_axes$axis2, pch=21, cex=0,
xlim=c(-0.8,0.8), ylim=c(-0.8,0.8), cex.lab=2, cex.axis=1.7,
xlab='NMDS Axis 1', ylab='NMDS Axis 2')
# add mock points
points(x=mock_axes$axis1, y=mock_axes$axis2,
col=c(wes_palette("FantasticFox")[3], wes_palette("FantasticFox")[5], 'forestgreen', 'black', wes_palette("FantasticFox")[1])[mock_axes$abx],
pch=1, lwd=3, cex=3.5)
# add mock infected points
points(x=infected_axes$axis1, y=infected_axes$axis2,
col=c(wes_palette("FantasticFox")[3], wes_palette("FantasticFox")[5], 'forestgreen', 'black', wes_palette("FantasticFox")[1])[infected_axes$abx],
pch=1, lwd=3, cex=3.5)
# Add legends
legend('topleft', legend=c('Streptomycin-treated', 'Cefoperzone-treated', 'Clindamycin-treated', 'No Antibiotics'),
col=c(wes_palette("FantasticFox")[1], wes_palette("FantasticFox")[3], wes_palette("FantasticFox")[5], 'black'),
pch=15, cex=1.9, pt.cex=2.8, bty='n')
#legend('bottomleft', legend=c('Mock Infected', '630 Infected'),
#       col='black', pt.bg=c('white','black'), pch=21, cex=2, pt.cex=3, bty='n')
mtext('A', side=2, line=2, las=2, adj=1.7, padj=-18.1, cex=1.6)
#-----------------------#
# Stripchart of Inverse simpson diversity
par(las=1, mar=c(1,4,1,1), mgp=c(2.5,0.7,0), yaxs='i')
stripchart(invsimpson~abx, data=metadata_summary, vertical=T, pch=2, lwd=2.5,
ylim=c(0,20), xaxt='n', cex=2,
col=c(wes_palette("FantasticFox")[1],wes_palette("FantasticFox")[3],wes_palette("FantasticFox")[5],'black'),
ylab='Inv. Simpson Diversity', method='jitter', jitter=0.15, cex.axis=1.7, cex.lab=2)
# add medians
segments(x0=0.7, y0=strep_div, x1=1.3, y1=strep_div, lwd=2.5)
segments(x0=1.7, y0=cef_div, x1=2.3, y1=cef_div, lwd=2.5)
segments(x0=2.7, y0=clinda_div, x1=3.3, y1=clinda_div, lwd=2.5)
segments(x0=3.7, y0=conv_div, x1=4.3, y1=conv_div, lwd=2.5)
text(x=4, y=19, '*', font=2, cex=3) # add significance
# add legend
legend('topleft', legend=c('Streptomycin-treated', 'Cefoperzone-treated', 'Clindamycin-treated', 'No Antibiotics'),
col=c(wes_palette("FantasticFox")[1], wes_palette("FantasticFox")[3], wes_palette("FantasticFox")[5], 'black'),
pch=15, cex=1.9, pt.cex=2.8, bty='n')
mtext('B', side=2, line=2, las=2, adj=1.7, padj=-19.5, cex=1.6)
#-----------------------#
# Possible family-level phylotype bar chart...
#mtext('c', side=2, line=2, las=2, adj=1.7, padj=-10.5, cex=1.1, font=2)
#-------------------------------------------------------------------------------------------------------------------------------------#
#Clean up
dev.off()
rm(plot_file, metadata_axes, mock_axes, infected_axes, metadata_summary,
strep_div, cef_div, clinda_div, conv_div)
for (dep in deps){
pkg <- paste('package:', dep, sep='')
detach(pkg, character.only = TRUE)
}
rm(dep, deps, pkg)
gc()
deps <- c('wesanderson','vegan');
for (dep in deps){
if (dep %in% installed.packages()[,"Package"] == FALSE){
install.packages(as.character(dep), quiet=TRUE);
}
library(dep, verbose=FALSE, character.only=TRUE)
}
rm(dep, deps)
#--------------------------------------------------------------------------------------------------------------#
# Define variables
cefoperazone_file <- '~/Desktop/Repositories/Jenior_Transcriptomics_2015/data/mapping/cdifficile630/all_genes/cefoperazone_630.RNA_reads2cdf630.norm.annotated.txt'
clindamycin_file <- '~/Desktop/Repositories/Jenior_Transcriptomics_2015/data/mapping/cdifficile630/all_genes/clindamycin_630.RNA_reads2cdf630.norm.annotated.txt'
streptomycin_file <- '~/Desktop/Repositories/Jenior_Transcriptomics_2015/data/mapping/cdifficile630/all_genes/streptomycin_630.RNA_reads2cdf630.norm.annotated.txt'
germfree_file <- '~/Desktop/Repositories/Jenior_Transcriptomics_2015/data/mapping/cdifficile630/all_genes/germfree.RNA_reads2cdf630.norm.annotated.txt'
# Open files
cefoperazone <- read.delim(cefoperazone_file, sep='\t', header=FALSE, row.names=1)
colnames(cefoperazone) <- c('Cefoperazone', 'ko', 'gene', 'pathway')
clindamycin <- read.delim(clindamycin_file, sep='\t', header=FALSE, row.names=1)
colnames(clindamycin) <- c('Clindamycin', 'ko', 'gene', 'pathway')
streptomycin <- read.delim(streptomycin_file, sep='\t', header=FALSE, row.names=1)
colnames(streptomycin) <- c('Streptomycin', 'ko', 'gene', 'pathway')
germfree <- read.delim(germfree_file, sep='\t', header=FALSE, row.names=1)
colnames(germfree) <- c('Germfree', 'ko', 'gene', 'pathway')
# Clean up
rm(cefoperazone_file, clindamycin_file, streptomycin_file, germfree_file)
#--------------------------------------------------------------------------------------------------------------#
# Format data for merging
cefoperazone$ko <- NULL
cefoperazone$gene <- NULL
cefoperazone$pathway <- NULL
clindamycin$ko <- NULL
clindamycin$gene <- NULL
clindamycin$pathway <- NULL
streptomycin$ko <- NULL
streptomycin$gene <- NULL
streptomycin$pathway <- NULL
# Merge tables
combined_mapping <- merge(streptomycin, cefoperazone, by='row.names')
rownames(combined_mapping) <- combined_mapping$Row.names
combined_mapping$Row.names <- NULL
combined_mapping <- merge(combined_mapping, clindamycin, by='row.names')
rownames(combined_mapping) <- combined_mapping$Row.names
combined_mapping$Row.names <- NULL
combined_mapping <- merge(combined_mapping, germfree, by='row.names')
rownames(combined_mapping) <- combined_mapping$Row.names
combined_mapping$Row.names <- NULL
rm(cefoperazone, clindamycin, streptomycin, germfree)
# Remove genes not in a pathway
combined_mapping <- subset(combined_mapping, pathway != 'none')
# Rarefy mappings to be equal within sequencing type
sub_size <- round(min(colSums(combined_mapping[,1:4])) * 0.9)
combined_mapping$Cefoperazone <- t(rrarefy(combined_mapping$Cefoperazone, sample=sub_size))
combined_mapping$Clindamycin <- t(rrarefy(combined_mapping$Clindamycin, sample=sub_size))
combined_mapping$Streptomycin <- t(rrarefy(combined_mapping$Streptomycin, sample=sub_size))
combined_mapping$Germfree <- t(rrarefy(combined_mapping$Germfree, sample=sub_size))
# Eliminate genes with no transcripts mapping
combined_mapping <- combined_mapping[rowSums(combined_mapping[,1:4]) != 0, ]
#--------------------------------------------------------------------------------------------------------------#
# Subset by KEGG catagory and pool
all_carbohydrate <- subset(combined_mapping, grepl('Carbohydrate_metabolism', combined_mapping$pathway))
carbohydrate <- t(as.data.frame(colSums(all_carbohydrate[,1:4])))
energy <- subset(combined_mapping, grepl('Energy_metabolism', combined_mapping$pathway))
energy <- t(as.data.frame(colSums(energy[,1:4])))
lipid <- subset(combined_mapping, grepl('Lipid_metabolism', combined_mapping$pathway))
lipid <- t(as.data.frame(colSums(lipid[,1:4])))
nucleotide <- subset(combined_mapping, grepl('Nucleotide_metabolism', combined_mapping$pathway))
nucleotide <- t(as.data.frame(colSums(nucleotide[,1:4])))
amino_acid <- subset(combined_mapping, grepl('Amino_acid_metabolism', combined_mapping$pathway))
other_amino_acids <- subset(combined_mapping, grepl('Metabolism_of_other_amino_acids', combined_mapping$pathway))
all_amino_acid <- rbind(amino_acid, other_amino_acids)
amino_acid <- t(as.data.frame(colSums(amino_acid[,1:4])))
other_amino_acids <- t(as.data.frame(colSums(other_amino_acids[,1:4])))
amino_acids <- amino_acid + other_amino_acids
rm(amino_acid, other_amino_acids)
glycan <- subset(combined_mapping, grepl('Glycan_biosynthesis_and_metabolism', combined_mapping$pathway))
glycan <- t(as.data.frame(colSums(glycan[,1:4])))
cofactors_and_vitamins <- subset(combined_mapping, grepl('Metabolism_of_cofactors_and_vitamins', combined_mapping$pathway))
cofactors_and_vitamins <- t(as.data.frame(colSums(cofactors_and_vitamins[,1:4])))
terpenoids_and_polyketides <- subset(combined_mapping, grepl('Metabolism_of_terpenoids_and_polyketides', combined_mapping$pathway))
terpenoids_and_polyketides <- t(as.data.frame(colSums(terpenoids_and_polyketides[,1:4])))
secondary_metabolites <- subset(combined_mapping, grepl('Biosynthesis_of_other_secondary_metabolites', combined_mapping$pathway))
secondary_metabolites <- t(as.data.frame(colSums(secondary_metabolites[,1:4])))
xenobiotics <- subset(combined_mapping, grepl('Xenobiotics_biodegradation_and_metabolism', combined_mapping$pathway))
xenobiotics <- t(as.data.frame(colSums(xenobiotics[,1:4])))
genetics <- subset(combined_mapping, grepl('Genetic_Information_Processing', combined_mapping$pathway))
genetics <- t(as.data.frame(colSums(genetics[,1:4])))
motility <- subset(combined_mapping, grepl('Cell_motility', combined_mapping$pathway))
motility <- t(as.data.frame(colSums(motility[,1:4])))
rm(combined_mapping)
# Assemble final table
pooled_mapping <- rbind(carbohydrate, energy, lipid, nucleotide, amino_acids, glycan,
cofactors_and_vitamins, terpenoids_and_polyketides, secondary_metabolites,
xenobiotics, genetics, motility)
rm(carbohydrate, energy, lipid, nucleotide, amino_acids, glycan, cofactors_and_vitamins, terpenoids_and_polyketides, secondary_metabolites, xenobiotics, genetics, motility)
rownames(pooled_mapping) <- c('Carbohydrate metabolism','Energy metabolism','Lipid metabolism','Nucleotide metabolism',
'Amino acid metabolism','Glycan metabolism', 'Cofactor/Vitamin metabolism','Terpenoid/Polyketide metabolism',
'Secondary metabolite synthesis', 'Xenobiotic metabolism','Genetic Information Processing','Cell motility')
transformed_mapping <- log10(pooled_mapping)
rm(pooled_mapping)
# Agregate carbohydrate and amino acid tables seperately
# Carbohydrates
glycolysis <- subset(all_carbohydrate, grepl('Glycolysis_/_Gluconeogenesis', all_carbohydrate$pathway))
glycolysis <- t(as.data.frame(colSums(glycolysis[,1:4])))
starch <- subset(all_carbohydrate, grepl('Starch_and_sucrose_metabolism', all_carbohydrate$pathway))
starch <- t(as.data.frame(colSums(starch[,1:4])))
citrate_cycle <- subset(all_carbohydrate, grepl('Citrate_cycle', all_carbohydrate$pathway))
citrate_cycle <- t(as.data.frame(colSums(citrate_cycle[,1:4])))
fructose <- subset(all_carbohydrate, grepl('Fructose_and_mannose_metabolism', all_carbohydrate$pathway))
fructose <- t(as.data.frame(colSums(fructose[,1:4])))
butanoate <- subset(all_carbohydrate, grepl('Butanoate_metabolism', all_carbohydrate$pathway))
butanoate <- t(as.data.frame(colSums(butanoate[,1:4])))
pentose_phosphate <- subset(all_carbohydrate, grepl('Pentose_phosphate_pathway', all_carbohydrate$pathway))
pentose_phosphate <- t(as.data.frame(colSums(pentose_phosphate[,1:4])))
amino_sugar <- subset(all_carbohydrate, grepl('Amino_sugar_and_nucleotide_sugar_metabolism', all_carbohydrate$pathway))
amino_sugar <- t(as.data.frame(colSums(amino_sugar[,1:4])))
pyruvate <- subset(all_carbohydrate, grepl('Pyruvate_metabolism', all_carbohydrate$pathway))
pyruvate <- t(as.data.frame(colSums(pyruvate[,1:4])))
glyoxylate <- subset(all_carbohydrate, grepl('Glyoxylate_and_dicarboxylate_metabolism', all_carbohydrate$pathway))
glyoxylate <- t(as.data.frame(colSums(glyoxylate[,1:4])))
fatty_acid <- subset(all_carbohydrate, grepl('Fatty_acid_degradation', all_carbohydrate$pathway))
fatty_acid <- t(as.data.frame(colSums(fatty_acid[,1:4])))
ascorbate <- subset(all_carbohydrate, grepl('Ascorbate_and_aldarate_metabolism', all_carbohydrate$pathway))
ascorbate <- t(as.data.frame(colSums(ascorbate[,1:4])))
galactose <- subset(all_carbohydrate, grepl('Galactose_metabolism', all_carbohydrate$pathway))
galactose <- t(as.data.frame(colSums(galactose[,1:4])))
pooled_carbohydrate <- rbind(glycolysis, starch, citrate_cycle, fructose, butanoate, pentose_phosphate,
amino_sugar, pyruvate, glyoxylate, fatty_acid, ascorbate, galactose)
rm(glycolysis, starch, citrate_cycle, fructose, butanoate, pentose_phosphate,
amino_sugar, pyruvate, glyoxylate, fatty_acid, ascorbate, galactose)
rownames(pooled_carbohydrate) <- c('Glycolysis/Gluconeogenesis', 'Starch/Sucrose metabolism', 'Citrate acid cycle',
'Fructose/Mannose metabolism', 'Butanoate metabolism', 'Pentose phosphate pathway',
'Amino/Nucleotide sugar metabolism', 'Pyruvate metabolism', 'Glyoxylate/Dicarboxylate metabolism',
'Fatty acid degradation', 'Ascorbate/Aldarate metabolism', 'Galactose metabolism')
# Log transform mappings
transformed_carbohydrate <- log10(pooled_carbohydrate)
rm(pooled_carbohydrate)
# Amino acids
alanine_aspartate_glutamate <- subset(all_amino_acid, grepl('Alanine,_aspartate_and_glutamate_metabolism', all_amino_acid$pathway))
alanine_aspartate_glutamate <- t(as.data.frame(colSums(alanine_aspartate_glutamate[,1:4])))
alanine <- subset(all_amino_acid, grepl('Alanine_metabolism', all_amino_acid$pathway))
alanine <- t(as.data.frame(colSums(alanine[,1:4])))
glutamine <- subset(all_amino_acid, grepl('D-Glutamine_and_D-glutamate_metabolism', all_amino_acid$pathway))
glutamine <- t(as.data.frame(colSums(glutamine[,1:4])))
alanine_aspartate_glutamate <- alanine_aspartate_glutamate + alanine + glutamine
rm(alanine, glutamine)
cysteine <- subset(all_amino_acid, grepl('Cysteine_and_methionine_metabolism', all_amino_acid$pathway))
cysteine <- t(as.data.frame(colSums(cysteine[,1:4])))
arginine <- subset(all_amino_acid, grepl('Arginine_and_proline_metabolism', all_amino_acid$pathway))
arginine <- t(as.data.frame(colSums(arginine[,1:4])))
histidine <- subset(all_amino_acid, grepl('Histidine_metabolism', all_amino_acid$pathway))
histidine <- t(as.data.frame(colSums(histidine[,1:4])))
valine <- subset(all_amino_acid, grepl('Valine,_leucine_and_isoleucine_biosynthesis', all_amino_acid$pathway))
valine <- t(as.data.frame(colSums(valine[,1:4])))
glycine <- subset(all_amino_acid, grepl('Glycine,_serine_and_threonine_metabolism', all_amino_acid$pathway))
glycine <- t(as.data.frame(colSums(glycine[,1:4])))
lysine <- subset(all_amino_acid, grepl('Lysine_biosynthesis', all_amino_acid$pathway))
lysine <- t(as.data.frame(colSums(lysine[,1:4])))
phenylalanine_tyrosine_tryptophan <- subset(all_amino_acid, grepl('Phenylalanine,_tyrosine_and_tryptophan_biosynthesis', all_amino_acid$pathway))
phenylalanine_tyrosine_tryptophan <- t(as.data.frame(colSums(phenylalanine_tyrosine_tryptophan[,1:4])))
phenylalanine <- subset(all_amino_acid, grepl('Phenylalanine_metabolism', all_amino_acid$pathway))
phenylalanine <- t(as.data.frame(colSums(phenylalanine[,1:4])))
tyrosine <- subset(all_amino_acid, grepl('Tyrosine_metabolism', all_amino_acid$pathway))
tyrosine <- t(as.data.frame(colSums(tyrosine[,1:4])))
taurine <- subset(all_amino_acid, grepl('Taurine_and_hypotaurine_metabolism', all_amino_acid$pathway))
taurine <- t(as.data.frame(colSums(taurine[,1:4])))
selenocompound <- subset(all_amino_acid, grepl('Selenocompound_metabolism', all_amino_acid$pathway))
selenocompound <- t(as.data.frame(colSums(selenocompound[,1:4])))
pooled_amino_acid <- rbind(histidine, cysteine, arginine, alanine_aspartate_glutamate, valine, glycine,
lysine, phenylalanine_tyrosine_tryptophan, phenylalanine, tyrosine, taurine, selenocompound)
rm(alanine_aspartate_glutamate, cysteine, arginine, histidine, valine, glycine,
lysine, phenylalanine_tyrosine_tryptophan, phenylalanine, tyrosine, taurine, selenocompound)
rownames(pooled_amino_acid) <- c('Histidine metabolism', 'Cysteine/Methionine metabolism',
'Arginine/Proline metabolism', 'Alanine/Aspartate/Glutamate metabolism', 'Valine/Leucine/Isoleucine synthesis',
'Glycine/Serine/Threonine metabolism', 'Lysine synthesis', 'Phenylalanine/Tyrosine/Tryptophan synthesis',
'Phenylalanine metabolism', 'Tyrosine metabolism', 'Taurine/Hypotaurine metabolism', 'Selenocompound metabolism')
# Log transform mappings
transformed_amino_acid <- log10(pooled_amino_acid)
rm(pooled_amino_acid)
#--------------------------------------------------------------------------------------------------------------#
# Set the color palette and output file name
darjeeling <- wes_palette("Darjeeling")
plot_file <- '~/Desktop/Repositories/Jenior_Transcriptomics_2015/results/supplement/figures/figure_S2.pdf'
# Generate figure
pdf(file=plot_file, width=12, height=10)
layout(matrix(c(1,2,2,2,
3,3,4,4),
nrow=2, ncol=4, byrow = TRUE))
plot(1, type='n', axes=F, xlab='', ylab='') # Empty plot
legend('left', legend=c('Streptomycin', 'Cefoperazone', 'Clindamycin', 'Gnotobiotic'), pt.cex=3.7, bty='n', cex=2.2,
pch=22, col='black', pt.bg=c(wes_palette('FantasticFox')[1],wes_palette('FantasticFox')[3],wes_palette('FantasticFox')[5],'forestgreen'))
# Global pathway annotations
par(las=1, mar=c(8,4,1,1))
barplot(t(transformed_mapping), col=c(wes_palette('FantasticFox')[1],wes_palette('FantasticFox')[3],wes_palette('FantasticFox')[5],'forestgreen'),
beside=TRUE, xaxt='n', yaxt='n', ylab='Transcript Abundance (Log10)', ylim=c(0,5))
box()
abline(h=c(1:4), lty=2)
barplot(t(transformed_mapping), col=c(wes_palette('FantasticFox')[1],wes_palette('FantasticFox')[3],wes_palette('FantasticFox')[5],'forestgreen'),
beside=TRUE, xaxt='n', yaxt='n', ylab='Transcript Abundance (Log10)', ylim=c(0,5), add=TRUE)
axis(side=2, at=c(1:4), parse(text=paste(rep(10,4), '^', seq(1,4,1), sep='')), tick=TRUE, las=1)
text(x=seq(4,59,5), y=par()$usr[3]-0.03*(par()$usr[4]-par()$usr[3]),
labels=rownames(transformed_mapping), srt=45, adj=1, xpd=TRUE, cex=0.8)
mtext('A', side=2, line=2, las=2, adj=1, padj=-13, cex=1.2)
legend('topright', legend='All KEGG Categories', bty='n', cex=1.6)
# Subpathways in Carbohydrate metabolism
par(las=1, mar=c(11,4,1,1))
barplot(t(transformed_carbohydrate), col=c(wes_palette('FantasticFox')[1],wes_palette('FantasticFox')[3],wes_palette('FantasticFox')[5],'forestgreen'),
beside=TRUE, xaxt='n', yaxt='n', ylab='Transcript Abundance (Log10)', ylim=c(0,4))
box()
abline(h=c(1:3), lty=2)
barplot(t(transformed_carbohydrate), col=c(wes_palette('FantasticFox')[1],wes_palette('FantasticFox')[3],wes_palette('FantasticFox')[5],'forestgreen'),
beside=TRUE, xaxt='n', yaxt='n', ylab='Transcript Abundance (Log10)', ylim=c(0,4), add=TRUE)
axis(side=2, at=c(1:3), parse(text=paste(rep(10,3), '^', seq(1,3,1), sep='')), tick=TRUE, las=1)
text(x=seq(4,59,5), y=par()$usr[3]-0.03*(par()$usr[4]-par()$usr[3]),
labels=rownames(transformed_carbohydrate), srt=45, adj=1, xpd=TRUE, cex=0.8)
mtext('B', side=2, line=2, las=2, adj=1, padj=-11.5, cex=1.2)
legend('topright', legend='Carbohydrate Metabolism', bty='n', cex=1.6)
# Subpathways in Amino Acid metabolism
par(las=1, mar=c(11,4,1,1))
barplot(t(transformed_amino_acid), col=c(wes_palette('FantasticFox')[1],wes_palette('FantasticFox')[3],wes_palette('FantasticFox')[5],'forestgreen'),
beside=TRUE, xaxt='n', yaxt='n', ylab='Transcript Abundance (Log10)', ylim=c(0,4))
box()
abline(h=c(1:3), lty=2)
barplot(t(transformed_amino_acid), col=c(wes_palette('FantasticFox')[1],wes_palette('FantasticFox')[3],wes_palette('FantasticFox')[5],'forestgreen'),
beside=TRUE, xaxt='n', yaxt='n', ylab='Transcript Abundance (Log10)', ylim=c(0,4), add=TRUE)
axis(side=2, at=c(1:3), parse(text=paste(rep(10,3), '^', seq(1,3,1), sep='')), tick=TRUE, las=1)
text(x=seq(4,59,5), y=par()$usr[3]-0.03*(par()$usr[4]-par()$usr[3]),
labels=rownames(transformed_amino_acid), srt=45, adj=1, xpd=TRUE, cex=0.8)
mtext('C', side=2, line=2, las=2, adj=1, padj=-11.5, cex=1.2)
legend('topright', legend='Amino Acid Metabolism', bty='n', cex=1.6)
dev.off()
pdf(file='~/Desktop/Repositories/Jenior_Transcriptomics_2015/results/supplement/figures/figure_S5.pdf', width=14, height=5)
layout(matrix(c(1,2), nrow=1, ncol=2, byrow = TRUE))
# Read in score distribution file
all_scores <- read.delim('~/Desktop/Repositories/Jenior_Transcriptomics_2015/data/metabolic_models/test_distribution.txt', header=FALSE)
metabolite_1 <- unique(all_scores[,1])
metabolite_1_score <- 6.329
metabolite_2 <- unique(all_scores[,2])
metabolite_2_score <- -4.297
# Create a curve for the sample distribution
par(mar=c(4,4,1,1))
d <- density(metabolite_1)
plot(d, type='n', main='', xlab='Metabolite Importance Score', ylab='Score Frequency (Log10)', las=1, ylim=c(0,0.12))
polygon(d, col='gray')
# Calculate stats
all_quantile = quantile(metabolite_1)
score_median = all_quantile[3]
iqr = as.numeric(all_quantile[4] - all_quantile[2])
numerator = 1.25 * iqr
denominator = 1.35 * sqrt(length(metabolite_1))
range_factor = numerator / denominator
range_95 = 1.6 * range_factor
lower_95 = score_median - range_95
upper_95 = score_median + range_95
# Summary lines
abline(v=score_median, lwd=2, col='black') # Median
abline(v=c(lower_95,upper_95), lty=2, lwd=2, col='red')
# Actual score for sorbitol
arrows(x0=metabolite_1_score, y0=0.11, x1=metabolite_1_score, y1=0.089, col='blue', length=0.2, angle=20, lwd=3)
mtext('A', side=2, line=2, las=2, adj=3, padj=-15, cex=1.1)
#-----------------------------#
# Create a curve for the sample distribution
par(mar=c(4,4,1,1))
d <- density(metabolite_2)
plot(d, type='n', main='', xlab='Metabolite Importance Score', ylab='Score Frequency (Log10)', las=1, ylim=c(0,0.12))
polygon(d, col='gray')
# Calculate stats
all_quantile = quantile(metabolite_2)
score_median = all_quantile[3]
iqr = all_quantile[4] - all_quantile[2]
numerator = 1.25 * iqr
denominator = 1.35 * sqrt(length(metabolite_2))
range_factor = numerator / denominator
range_95 = 1.6 * range_factor
lower_95 = score_median - range_95
upper_95 = score_median + range_95
# Summary lines
abline(v=score_median, lwd=2, col='black') # Median
abline(v=c(lower_95,upper_95), lty=2, lwd=2, col='red')
# Actual score for aspartate
arrows(x0=metabolite_2_score, y0=0.095, x1=metabolite_2_score, y1=0.075, col='blue', length=0.2, angle=20, lwd=3)
mtext('B', side=2, line=2, las=2, adj=3, padj=-15, cex=1.1)
dev.off()
*Clostridium difficile* infection has grown to be the largest single cause of hospital-acquired infection in the United States. A compromised gut microbiota, typically through previous antibiotic treatment, is a prerequisite feature of *C. difficile* colonization susceptibility. This loss of resistance has also been described across classes of antibiotics, in which many result in distinct gut communities and each presumably presents individual metabolic challenges to *C. difficile* as it colonizes. In this study we demonstrate that not only does *C. difficile* alter its pathogenesis between differentially sensitized hosts, but also exploits separate available nutrient niches across these environments. We accomplish this through an *in vivo* murine model of infection and characterized using transcriptomic-enabled genome-scale metabolic modeling in combination with untargeted metabolomic analysis. Our results support that *C. difficile* possesses a highly plastic nutrient niche space, allowing it to successfully infect numerous different hosts and ultimately cause disease. This work also provides evidence that *C. difficile* virulence may be driven by the concentrations of specific carbohydrate sources that are accessible for growth during each unique infection.
