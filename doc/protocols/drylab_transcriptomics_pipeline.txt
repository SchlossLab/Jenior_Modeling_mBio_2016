# Matt Jenior - Schloss Laboratory - University of Michigan - 2016

# This pipeline curates metatranscriptomic reads for mapping to a corresponding metagenome

# Table of Contents
# 1. Dependencies
# 2. Read pooling
# 3. Quality trimming
# 4. Mapping
# 6. Extra

#-------------------------------------------------------------------------------------------------------------------------#

# 1. Dependencies
- Cutadapt - http://cutadapt.readthedocs.io/en/stable/guide.html
- Sickle - https://github.com/najoshi/sickle
- Bowtie2 - http://bowtie-bio.sourceforge.net/bowtie2/index.shtml
- Picard Tools - http://broadinstitute.github.io/picard/
- Samtools - http://samtools.sourceforge.net/
- seq_stats.py - custom, in code directory of repository

#-------------------------------------------------------------------------------------------------------------------------#

# 2. Pool raw read files from the same sample

# Unzip and pool the right reads
zcat *_L00*_R1_*.fastq > Transcriptome.read1.pool.fastq.gz
zcat *_L00*_R2_*.fastq > Transcriptome.read2.pool.fastq.gz
gunzip Transcriptome.*.pool.fastq.gz

# Record some statistics about the initial reads
python /mnt/EXT/Schloss-data/bin/seq_stats.py Transcriptome.read1.pool.fastq > Transcriptome.pooling.summary
python /mnt/EXT/Schloss-data/bin/seq_stats.py Transcriptome.read2.pool.fastq >> Transcriptome.pooling.summary

#-------------------------------------------------------------------------------------------------------------------------#

# 3. Quality trim the data

# Cut residual Illumina adapters (needs to be adjusted for each sequencing effort)
python2.7 /mnt/EXT/Schloss-data/bin/cutadapt-1.9.1/bin/cutadapt --error-rate=0.1 --overlap=10 -a forward -A reverse -o Transcriptome.read1.pool.cut.fastq -p Transcriptome.read2.pool.cut.fastq Transcriptome.read1.pool.fastq Transcriptome.read2.pool.fastq
python /mnt/EXT/Schloss-data/bin/seq_stats.py Transcriptome.read1.pool.cut.fastq > Transcriptome.trimming.summary
python /mnt/EXT/Schloss-data/bin/seq_stats.py Transcriptome.read2.pool.cut.fastq >> Transcriptome.trimming.summary

# Quality trim the reads based on quality scores
/home/mljenior/bin/sickle/sickle pe -f Transcriptome.read1.pool.cut.fastq -r Transcriptome.read2.pool.cut.fastq -t sanger -o Transcriptome.read1.pool.cut.trim.fastq -p Transcriptome.read2.pool.cut.trim.fastq -s Transcriptome.orphan.pool.cut.trim.fastq -q 30 -l 21

# Convert fastqs to fasta files
awk '{print ">" substr($0,2);getline;print;getline;getline}' Transcriptome.read1.pool.cut.trim.fastq > Transcriptome.read1.pool.cut.trim.fasta
awk '{print ">" substr($0,2);getline;print;getline;getline}' Transcriptome.read2.pool.cut.trim.fastq > Transcriptome.read2.pool.cut.trim.fasta
awk '{print ">" substr($0,2);getline;print;getline;getline}' Transcriptome.orphan.pool.cut.trim.fastq > Transcriptome.orphan.pool.cut.trim.fasta

# Record stats about the rest of the trimming
python /mnt/EXT/Schloss-data/bin/seq_stats.py Transcriptome.read1.pool.cut.trim.fasta >> Transcriptome.trimming.summary
python /mnt/EXT/Schloss-data/bin/seq_stats.py Transcriptome.read2.pool.cut.trim.fasta >> Transcriptome.trimming.summary
python /mnt/EXT/Schloss-data/bin/seq_stats.py Transcriptome.orphan.pool.cut.trim.fasta >> Transcriptome.trimming.summary

#-------------------------------------------------------------------------------------------------------------------------#

# 4. Map to C. difficile 630 genes
/home/mljenior/bin/bowtie/bowtie /mnt/EXT/Schloss-data/matt/Transcriptomes_HiSeq/cdf/cdf_db -f -p 4 -1 Transcriptome.read1.pool.cut.trim.filt1.filt2.fasta -2 Transcriptome.read2.pool.cut.trim.filt1.filt2.fasta reads.aligned.paired.transcripts2cdf630.sam
/home/mljenior/bin/bowtie/bowtie /mnt/EXT/Schloss-data/matt/Transcriptomes_HiSeq/cdf/cdf_db -f -p 4 Transcriptome.orphan.pool.cut.trim.filt1.fasta reads.aligned.orphan.transcripts2cdf630.sam

# Format alignment
samtools view -bS Transcriptome.aligned.paired.transcripts2cdf630.sam > Transcriptome.aligned.paired.transcripts2cdf630.bam
samtools sort Transcriptome.aligned.paired.transcripts2cdf630.bam Transcriptome.aligned.paired.transcripts2cdf630.sort
samtools view -bS Transcriptome.aligned.orphan.transcripts2cdf630.sam > Transcriptome.aligned.orphan.transcripts2cdf630.bam
samtools sort Transcriptome.aligned.orphan.transcripts2cdf630.bam Transcriptome.aligned.orphan.transcripts2cdf630.sort

# Merge and sort paired-end and single-end mappings
samtools merge Transcriptome.RNA_reads2cdf630.sort.merge.bam Transcriptome.pair.RNA_reads2cdf630.sort.bam Transcriptome.orphan.RNA_reads2cdf630.sort.bam
samtools sort Transcriptome.RNA_reads2cdf630.sort.merge.bam $Transcriptome.RNA_reads2cdf630.sort.merge.sort

# Remove PCR and optical duplicates
java -Xmx10g -jar /share/apps/rhel6/picard/1.77/MarkDuplicates.jar \
	INPUT=Transcriptome.RNA_reads2cdf630.sort.merge.sort.bam \
	OUTPUT=Transcriptome.RNA_reads2cdf630.sort.merge.sort.rmdup.bam \
	METRICS_FILE=Transcriptome.RNA_reads2cdf630.sort.merge.sort.rmdup.metrics \
	AS=TRUE \
	VALIDATION_STRINGENCY=LENIENT \
	MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=1000 \
	REMOVE_DUPLICATES=TRUE

# Sort and index final BAM files
samtools sort Transcriptome.RNA_reads2cdf630.sort.merge.sort.rmdup.bam Transcriptome.RNA_reads2cdf630.sort.merge.sort.rmdup.sort
samtools index Transcriptome.RNA_reads2cdf630.sort.merge.sort.rmdup.sort.bam

# Convert to human-readable format
samtools idxstats Transcriptome.RNA_reads2cdf630.sort.merge.sort.rmdup.sort.bam > Transcriptome.RNA_reads2cdf630.txt

# Normalize mapping abundances by read and gene length
code/python/normalize_idxstats.py Transcriptome.RNA_reads2cdf630.txt 50

# Remainder of the analysis is performed in R

#-------------------------------------------------------------------------------------------------------------------------#

# 6. Extra







#!/bin/bash

cd /mnt/EXT/Schloss-data/matt/Transcriptomes_HiSeq/fastq/$1

pool_job_id=$(qsub -v transcriptome=$1 /mnt/EXT/Schloss-data/matt/Transcriptomes_HiSeq/pbs/pool.pbs | sed 's/\..*$//')
echo $1 read pooling: $pool_job_id


# Select correct sequencing primers
F_primer=AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT
if [ $1 = 'cefoperazone_630' ]; then
	R_primer=CAAGCAGAAGACGGCATACGAGATCGTGATGTGACTGGAGTTCAGACGTGTGCTCTTCCGATC
fi
if [ $1 = 'cefoperazone_mock' ]; then
	R_primer=CAAGCAGAAGACGGCATACGAGATACATCGGTGACTGGAGTTCAGACGTGTGCTCTTCCGATC
fi
if [ $1 = 'clindamycin_630' ]; then
	R_primer=CAAGCAGAAGACGGCATACGAGATTGGTCAGTGACTGGAGTTCAGACGTGTGCTCTTCCGATC
fi
if [ $1 = 'clindamycin_mock' ]; then
	R_primer=CAAGCAGAAGACGGCATACGAGATGATCTGGTGACTGGAGTTCAGACGTGTGCTCTTCCGATC
fi
if [ $1 = 'streptomycin_630' ]; then
	R_primer=CAAGCAGAAGACGGCATACGAGATAAGCTAGTGACTGGAGTTCAGACGTGTGCTCTTCCGATC
fi
if [ $1 = 'streptomycin_mock' ]; then
	R_primer=CAAGCAGAAGACGGCATACGAGATCGTTTCACGTGACTGGAGTTCAGACGTGTGCTCTTCCGATC
fi
if [ $1 = 'conventional' ]; then
	R_primer=CAAGCAGAAGACGGCATACGAGATAAGGCCACGTGACTGGAGTTCAGACGTGTGCTCTTCCGATC
fi
if [ $1 = 'germfree' ]; then
	R_primer=CAAGCAGAAGACGGCATACGAGATATCCACTCGTGACTGGAGTTCAGACGTGTGCTCTTCCGATC
fi

trimming_job_id=$(qsub -v transcriptome=$1,forward=$F_primer,reverse=$R_primer -W depend=afterok:$pool_job_id /mnt/EXT/Schloss-data/matt/Transcriptomes_HiSeq/pbs/trimming.pbs | sed 's/\..*$//')
echo $1 quality trimming: $trimming_job_id

filter_job_id=$(qsub -v transcriptome=$1 -W depend=afterok:$trimming_job_id /mnt/EXT/Schloss-data/matt/Transcriptomes_HiSeq/pbs/filter.pbs | sed 's/\..*$//')
echo $1 filtering reads: $filter_job_id

echo








